{"version":3,"file":"static/js/588.eff89a2b.chunk.js","mappings":"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","sources":["components/ShopingCart/CartForm/CartForm.styled.jsx","components/ShopingCart/CartForm/CartForm.jsx","components/ShopingCart/CartItem/CartItem.styled.jsx","components/ShopingCart/CartItem/CartItem.jsx","components/ShopingCart/CartList/CartList.styled.jsx","components/ShopingCart/CartList/CartList.jsx","components/ShopingCart/ShopingCart.styled.jsx","components/ShopingCart/validationSchema.js","components/ShopingCart/ShopingCart.jsx","pages/ShoppingCart.jsx","redux/cart/selectors.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled.div`\n  display: flex;\n\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n\n  padding: 30px 60px;\n  width: 550px;\n\n  border-radius: 5px;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 5px;\n  width: 100%;\n`;\n\nexport const StyledField = styled(Field)`\n  width: 100%;\n  padding: 8px 16px;\n  border-radius: 5px;\n  border: 1px solid black;\n  background-color: transparent;\n  transition: all 250ms ease-in-out;\n\n  &::placeholder {\n    color: black;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  position: absolute;\n  bottom: -15px;\n  left: 0;\n  color: red;\n  font-size: 12px;\n  margin-top: 5px;\n`;\n","import {\n  StyledForm,\n  StyledField,\n  Label,\n  StyledErrorMessage,\n} from './CartForm.styled';\n\nconst CartForm = props => {\n  return (\n    <StyledForm>\n      <Label>\n        Name\n        <StyledField type=\"text\" name=\"name\" />\n        <StyledErrorMessage component=\"div\" name=\"name\" />\n      </Label>\n\n      <Label>\n        Email\n        <StyledField type=\"text\" name=\"email\" />\n        <StyledErrorMessage component=\"div\" name=\"email\" />\n      </Label>\n\n      <Label>\n        Phone\n        <StyledField type=\"text\" name=\"phone\" />\n        <StyledErrorMessage component=\"div\" name=\"phone\" />\n      </Label>\n\n      <Label>\n        Address\n        <StyledField type=\"text\" name=\"address\" />\n        <StyledErrorMessage component=\"div\" name=\"address\" />\n      </Label>\n    </StyledForm>\n  );\n};\n\nexport default CartForm;\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  /* gap: 50px; */\n  width: 400px;\n\n  border-radius: 5px;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n`;\n\nexport const Thumb = styled.div`\n  width: 50%;\n  height: 100%;\n  border-radius: 5px;\n  overflow: hidden;\n\n  > img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 50%;\n  gap: 16px;\n\n  padding: 10px 0;\n\n  > button {\n    border: none;\n    background-color: transparent;\n    cursor: pointer;\n    transition: all 250ms ease-in-out;\n\n    &:hover,\n    &:focus {\n      color: orangered;\n      transform: scale(1.1);\n    }\n  }\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n\n  > button {\n    border-radius: 5px;\n    border: 1px solid black;\n    background-color: transparent;\n    cursor: pointer;\n    transition: all 250ms ease-in-out;\n\n    &:hover,\n    &:focus {\n      color: white;\n      background-color: orangered;\n      border-color: transparent;\n    }\n  }\n`;\n","import { Item, Thumb, Wrapper, ButtonWrapper } from './CartItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { delFromCart, increase, decrease } from '../../../redux/cart/slice';\nimport { BsTrash3 } from 'react-icons/bs';\n\nconst CartItem = ({ img, price, name, id, amount }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Item>\n      <Thumb>\n        <img\n          src={`https://food-delivery-g72t.onrender.com/${img}`}\n          alt=\"food\"\n        />\n      </Thumb>\n      <Wrapper>\n        <h2>{name}</h2>\n        <span>${price * amount}.00</span>\n        <ButtonWrapper>\n          <button type=\"button\" onClick={() => dispatch(decrease(id))}>\n            -\n          </button>\n          <span>{amount}</span>\n          <button type=\"button\" onClick={() => dispatch(increase(id))}>\n            +\n          </button>\n        </ButtonWrapper>\n        <button type=\"button\" onClick={() => dispatch(delFromCart(id))}>\n          <BsTrash3 size={'20px'} />\n        </button>\n      </Wrapper>\n    </Item>\n  );\n};\n\nexport default CartItem;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding: 20px 60px;\n  width: 550px;\n  row-gap: 20px;\n\n  border-radius: 5px;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n\n  overflow-y: scroll;\n\n  ::-webkit-scrollbar {\n    width: 14px;\n    height: 18px;\n  }\n  ::-webkit-scrollbar-thumb {\n    height: 6px;\n    border: 4px solid rgba(0, 0, 0, 0);\n    background-clip: padding-box;\n    -webkit-border-radius: 7px;\n    background-color: rgba(0, 0, 0, 0.15);\n    -webkit-box-shadow: inset -1px -1px 0px rgba(0, 0, 0, 0.05),\n      inset 1px 1px 0px rgba(0, 0, 0, 0.05);\n  }\n  ::-webkit-scrollbar-button {\n    width: 0;\n    height: 0;\n    display: none;\n  }\n  ::-webkit-scrollbar-corner {\n    background-color: transparent;\n  }\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-size: 20px;\n  font-weight: 700;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectCart } from '../../../redux/cart/selectors';\nimport CartItem from '../CartItem/CartItem';\nimport { List, Text } from './CartList.styled';\n\nconst CartList = () => {\n  const { items } = useSelector(selectCart);\n\n  return items.length > 0 ? (\n    <List>\n      {items.map(({ id, img, name, price, amount }) => (\n        <CartItem\n          key={id}\n          id={id}\n          img={img}\n          name={name}\n          price={price}\n          amount={amount}\n        />\n      ))}\n    </List>\n  ) : (\n    <List>\n      <Text>Cart is empty</Text>\n    </List>\n  );\n};\n\nexport default CartList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  height: calc(100vh - 250px);\n`;\n\nexport const Wrapper = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 20px;\n\n  > span {\n    font-size: 20px;\n    font-weight: 700;\n  }\n\n  > button {\n    padding: 16px 32px;\n    font-size: 16px;\n    font-weight: 700;\n    border-radius: 20px;\n    border: 1px solid black;\n    background-color: transparent;\n    cursor: pointer;\n\n    transition: all 250ms ease-in-out;\n\n    &:hover,\n    &:focus {\n      color: white;\n      background-color: orangered;\n      border-color: transparent;\n    }\n  }\n`;\n","import * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required()\n    .trim()\n    .min(3, 'must be min 3 characters long')\n    .max(12, 'must be max 12 characters long'),\n  email: yup.string().required().email(),\n\n  phone: yup\n    .string()\n    .required()\n    .trim()\n    .min(6, 'must be min 6 characters long')\n    .max(12, 'must be max 12 characters long'),\n\n  address: yup\n    .string()\n    .required()\n    .trim()\n    .min(3, 'must be min 3 characters long'),\n});\n\nexport default schema;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCart } from 'redux/cart/selectors';\nimport { getCartTotal, clearCart } from 'redux/cart/slice';\nimport { addNewOrder } from '../../services/api';\nimport CartForm from 'components/ShopingCart/CartForm/CartForm';\nimport CartList from 'components/ShopingCart/CartList/CartList';\nimport { Container, Wrapper, ButtonWrapper } from './ShopingCart.styled';\nimport { Formik, Form } from 'formik';\nimport schema from './validationSchema';\nimport { toast } from 'react-hot-toast';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  phone: '',\n  address: '',\n};\n\nconst ShopingCart = () => {\n  const { totalAmount, items } = useSelector(selectCart);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCartTotal());\n  }, [dispatch, items]);\n\n  const handleSubmit = async (values, helpers) => {\n    if (!items.length) {\n      return toast.error('Cart is empty');\n    }\n\n    const oreder = {\n      order: Date.now(),\n      ...values,\n      items,\n      totalAmount,\n    };\n\n    try {\n      await addNewOrder(oreder);\n      dispatch(clearCart());\n      helpers.resetForm();\n      toast.success('Order is successfully');\n    } catch (error) {\n      toast.error('Something went wrong');\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Container>\n          <Wrapper>\n            <CartForm />\n            <CartList />\n          </Wrapper>\n          <ButtonWrapper>\n            <span>Total Price: ${totalAmount}.00</span>\n            <button type=\"submit\">Submit</button>\n          </ButtonWrapper>\n        </Container>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ShopingCart;\n","import ShopingCart from 'components/ShopingCart/ShopingCart';\n\nconst ShoppingCart = () => {\n  return <ShopingCart />;\n};\n\nexport default ShoppingCart;\n","export const selectCart = state => state.cart;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://food-delivery-g72t.onrender.com';\n\nexport const getAllFoods = async signal => {\n  const response = await axios.get(`/api/dishes`, {\n    signal,\n  });\n  return response.data;\n};\n\nexport const getAllOrders = async (movieId, signal) => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    signal,\n  });\n  return response.data;\n};\n\nexport const addNewOrder = async (data, signal) => {\n  const response = await axios.post(`/api/orders`, data);\n  return response.data;\n};\n"],"names":["StyledForm","styled","Label","StyledField","Field","StyledErrorMessage","ErrorMessage","props","type","name","component","Item","Thumb","Wrapper","ButtonWrapper","img","price","id","amount","dispatch","useDispatch","src","alt","onClick","decrease","increase","delFromCart","size","List","Text","items","useSelector","selectCart","length","map","Container","yup","shape","required","trim","min","max","email","phone","address","initialValues","totalAmount","useEffect","getCartTotal","handleSubmit","values","helpers","toast","oreder","order","Date","now","addNewOrder","clearCart","resetForm","validationSchema","schema","onSubmit","state","cart","axios","getAllFoods","signal","response","data"],"sourceRoot":""}